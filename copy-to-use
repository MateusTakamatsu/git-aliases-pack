git config --global alias.setal '!f() { git config --global alias.$1 "$2"; }; f' && git setal unsetal '!f() { git config --global --unset alias.$1; }; f' && git setal listal '!GIT_PAGER=cat git config --global --get-regexp alias | nl -w3 -s". "' && git setal delals 'config --global --remove-section alias' && git setal findal '!f() { if [[ "$1" == "-i" ]]; then shift; git config --get-regexp "^alias\\." | sed "s/^alias.//" | grep -i --color=always "$@" | nl -w3 -s". "; else git config --get-regexp "^alias\\." | nl -w3 -s". " | grep --color=always "$@"; fi }; f' && git setal c checkout && git setal b branch && git setal s status && git setal stap 'stash apply' && git setal showf '!f() { unstaged_files=$(git diff --name-only); untracked_files=$(git ls-files --others --exclude-standard); all_files=$(echo "$unstaged_files" && echo "$untracked_files" | sort); if [ -z "$all_files" ]; then echo "No files to be added"; else echo "Files to be added:"; i=1; for file in $all_files; do if ((i % 2 == 0)); then printf "\033[31m%2d. %s\033[0m\n" $i "$file"; else printf "%2d. %s\n" $i "$file"; fi; ((i++)); done; fi; }; f' && git setal addf '!f() { files=($(git diff --name-only && git ls-files --others --exclude-standard)); if [ $# -eq 0 ]; then echo "Error: No file index provided."; return 1; fi; for param in "$@"; do if ((param >= 1 && param <= ${#files[@]})); then git add "${files[$((param-1))]}"; else echo "Error: Invalid index: $param."; fi; done; }; f' && git setal cm '!sh -c '\''current_branch=$(git rev-parse --abbrev-ref HEAD); task_number=$(echo $current_branch | grep -oP "(?<=TEC-)[0-9]+(?=-)"); if [ -z "$task_number" ] && [ "$1" != "merge" ]; then echo "Error: Task number not found in branch name." >&2; exit 1; fi; case "$1" in feat) emoji="heavy_plus_sign";; fix) emoji="bug";; docs) emoji="pencil";; test) emoji="test_tube";; build) emoji="building_construction";; perf) emoji="zap";; style) emoji="paintbrush";; refactor) emoji="repeat";; chore) emoji="gear";; ci) emoji="white_check_mark";; raw) emoji="open_file_folder";; merge) emoji="cyclone";; *) echo "Error: Commit type not mapped." >&2; exit 1;; esac; if [ "$1" = "merge" ] && [ -z "$2" ]; then message=":$emoji: $1/TEC-$task_number: Merge branch develop into $current_branch"; else message=":$emoji: $1/TEC-$task_number: $2"; fi; git commit -m "$message"'\'' _' && git setal undocm '!f() { [ $# -gt 2 ] && echo "Error: Only 2 params are allowed." && return 1; mode="--mixed"; number=1; if [ $# -ge 1 ]; then if [[ "$1" == -* ]]; then case "$1" in -s) mode="--soft" ;; -m) mode="--mixed" ;; -h) mode="--hard" ;; *) echo "Error: Invalid param detected." && return 1 ;; esac; [ $# -eq 2 ] && number="$2"; else if [[ "$1" =~ ^[0-9]+$ ]]; then number="$1"; else echo "Invalid param detected" && return 1; fi; [ $# -eq 2 ] && case "$2" in -s) mode="--soft" ;; -m) mode="--mixed" ;; -h) mode="--hard" ;; *) echo "Invalid param detected" && return 1 ;; esac; fi; fi; git reset $mode HEAD~$number; }; f' && git setal up '!git push || git push --set-upstream origin $(git rev-parse --abbrev-ref HEAD)' && git setal creb '!f() { if [ "$#" -lt 2 ] || [ "$#" -gt 3 ]; then echo "Error: Invalid params. Unable to create Branch."; return 1; fi; if [ "$#" -eq 3 ] && [ "$1" != "-h" ]; then echo "Error: Invalid params. Unable to create Branch."; return 1; fi; if [ "$#" -eq 3 ]; then type="hotfix"; shift; else type="feature"; fi; number="$1"; name="$2"; converted_name=""; for (( i=0; i<${#name}; i++ )); do char="${name:$i:1}"; case "$char" in Á|À|Ã|Â) converted_name="${converted_name}A" ;; á|à|ã|â) converted_name="${converted_name}a" ;; Ó|Õ|Ô) converted_name="${converted_name}O" ;; ó|õ|ô) converted_name="${converted_name}o" ;; É|Ê) converted_name="${converted_name}E" ;; é|ê) converted_name="${converted_name}e" ;; Í) converted_name="${converted_name}I" ;; í) converted_name="${converted_name}i" ;; Ú) converted_name="${converted_name}U" ;; ú) converted_name="${converted_name}u" ;; Ç) converted_name="${converted_name}C" ;; ç) converted_name="${converted_name}c" ;; "-"|" "|"_" ) converted_name="${converted_name}-" ;; [0-9A-Za-z] ) converted_name="${converted_name}$char" ;; *) echo "Error: Invalid character: $char"; return 1 ;; esac; done; git checkout -b ${type}/TEC-${number}-${converted_name}; } ; f' && git setal delb '!f() { git branch -D $1; }; f' && git setal mdev '!f() { current_branch=$(git rev-parse --abbrev-ref HEAD); if [ "$current_branch" = "develop" ]; then git pull; else git checkout develop && git pull && git checkout "$current_branch" && git merge develop; fi; }; f' && git setal clearb '!f() { current_branch=$(git symbolic-ref --short HEAD); for branch in $(git branch --list | grep -v -E "^\*|develop|master|main|$current_branch"); do git branch -D $branch; done; }; f'
